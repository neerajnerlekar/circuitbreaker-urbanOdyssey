{
  "address": "0x80E7d72BEb5E16ee12b261366601949FCf269C0A",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC1155InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC1155InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idsLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "valuesLength",
          "type": "uint256"
        }
      ],
      "name": "ERC1155InvalidArrayLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "ERC1155InvalidOperator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC1155InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC1155InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC1155MissingApprovalForAll",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllLocations",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "registeredBy",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "level",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "placeName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "placeType",
              "type": "string"
            },
            {
              "internalType": "enum Structs.Faction",
              "name": "faction",
              "type": "uint8"
            }
          ],
          "internalType": "struct Structs.Location[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        }
      ],
      "name": "getCHIPSBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        }
      ],
      "name": "getENERGYBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_messageHash",
          "type": "bytes32"
        }
      ],
      "name": "getEthSignedMessageHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_messageHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "isVerified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "locationId",
          "type": "uint256"
        }
      ],
      "name": "locations",
      "outputs": [
        {
          "internalType": "address",
          "name": "registeredBy",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "level",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "placeName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "placeType",
          "type": "string"
        },
        {
          "internalType": "enum Structs.Faction",
          "name": "faction",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "players",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "verifiedPlaces",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "registeredPlaces",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isVerified",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "hometown",
          "type": "string"
        },
        {
          "internalType": "enum Structs.Faction",
          "name": "faction",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ethSignedMessageHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "recoverSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_locationName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_locationType",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "registerAndVerifyPlace",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_homeTown",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_msgHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        },
        {
          "internalType": "enum Structs.Faction",
          "name": "_faction",
          "type": "uint8"
        }
      ],
      "name": "registerPlayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "splitSignature",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenURIs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_locationId",
          "type": "uint256"
        }
      ],
      "name": "upgradePlace",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x95412a76b36d329a68a2e20fcc6852df5328491cce228699db4236d1ece46525",
  "receipt": {
    "to": null,
    "from": "0xbd53471abf1C3827b8EeEF4898fcfe76821a3C2B",
    "contractAddress": "0x80E7d72BEb5E16ee12b261366601949FCf269C0A",
    "transactionIndex": 0,
    "gasUsed": "2562473",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xe0aa43abe4761da86325c0fcd7e0d485ce754ad22b82839458bab421c426fad3",
    "transactionHash": "0x95412a76b36d329a68a2e20fcc6852df5328491cce228699db4236d1ece46525",
    "logs": [],
    "blockNumber": 3008290,
    "cumulativeGasUsed": "2562473",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fd2b8602df7cd9b755ff782b721645af",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllLocations\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"registeredBy\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"placeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"placeType\",\"type\":\"string\"},{\"internalType\":\"enum Structs.Faction\",\"name\":\"faction\",\"type\":\"uint8\"}],\"internalType\":\"struct Structs.Location[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getCHIPSBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getENERGYBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_messageHash\",\"type\":\"bytes32\"}],\"name\":\"getEthSignedMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_messageHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isVerified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"locationId\",\"type\":\"uint256\"}],\"name\":\"locations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"registeredBy\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"placeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"placeType\",\"type\":\"string\"},{\"internalType\":\"enum Structs.Faction\",\"name\":\"faction\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"verifiedPlaces\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registeredPlaces\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"hometown\",\"type\":\"string\"},{\"internalType\":\"enum Structs.Faction\",\"name\":\"faction\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ethSignedMessageHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"recoverSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_locationName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_locationType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"registerAndVerifyPlace\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_homeTown\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_msgHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"enum Structs.Faction\",\"name\":\"_faction\",\"type\":\"uint8\"}],\"name\":\"registerPlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"splitSignature\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenURIs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_locationId\",\"type\":\"uint256\"}],\"name\":\"upgradePlace\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UrbanOdyssey.sol\":\"UrbanOdyssey\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"./IERC1155.sol\\\";\\nimport {IERC1155Receiver} from \\\"./IERC1155Receiver.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {Arrays} from \\\"../../utils/Arrays.sol\\\";\\nimport {IERC1155Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n */\\nabstract contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI, IERC1155Errors {\\n    using Arrays for uint256[];\\n    using Arrays for address[];\\n\\n    mapping(uint256 id => mapping(address account => uint256)) private _balances;\\n\\n    mapping(address account => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256 /* id */) public view virtual returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual returns (uint256[] memory) {\\n        if (accounts.length != ids.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, accounts.length);\\n        }\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts.unsafeMemoryAccess(i), ids.unsafeMemoryAccess(i));\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeTransferFrom(from, to, id, value, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeBatchTransferFrom(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`\\n     * (or `to`) is the zero address.\\n     *\\n     * Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}\\n     *   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     *\\n     * NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead.\\n     */\\n    function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual {\\n        if (ids.length != values.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, values.length);\\n        }\\n\\n        address operator = _msgSender();\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids.unsafeMemoryAccess(i);\\n            uint256 value = values.unsafeMemoryAccess(i);\\n\\n            if (from != address(0)) {\\n                uint256 fromBalance = _balances[id][from];\\n                if (fromBalance < value) {\\n                    revert ERC1155InsufficientBalance(from, fromBalance, value, id);\\n                }\\n                unchecked {\\n                    // Overflow not possible: value <= fromBalance\\n                    _balances[id][from] = fromBalance - value;\\n                }\\n            }\\n\\n            if (to != address(0)) {\\n                _balances[id][to] += value;\\n            }\\n        }\\n\\n        if (ids.length == 1) {\\n            uint256 id = ids.unsafeMemoryAccess(0);\\n            uint256 value = values.unsafeMemoryAccess(0);\\n            emit TransferSingle(operator, from, to, id, value);\\n        } else {\\n            emit TransferBatch(operator, from, to, ids, values);\\n        }\\n    }\\n\\n    /**\\n     * @dev Version of {_update} that performs the token acceptance check by calling\\n     * {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if it\\n     * contains code (eg. is a smart contract at the moment of execution).\\n     *\\n     * IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So any\\n     * update to the contract state after this function would break the check-effect-interaction pattern. Consider\\n     * overriding {_update} instead.\\n     */\\n    function _updateWithAcceptanceCheck(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal virtual {\\n        _update(from, to, ids, values);\\n        if (to != address(0)) {\\n            address operator = _msgSender();\\n            if (ids.length == 1) {\\n                uint256 id = ids.unsafeMemoryAccess(0);\\n                uint256 value = values.unsafeMemoryAccess(0);\\n                _doSafeTransferAcceptanceCheck(operator, from, to, id, value, data);\\n            } else {\\n                _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, values, data);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the values in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens of type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory values) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the zero address.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC1155InvalidOperator(address(0));\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Performs an acceptance check by calling {IERC1155-onERC1155Received} on the `to` address\\n     * if it contains code at the moment of execution.\\n     */\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes memory data\\n    ) private {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    // Tokens rejected\\n                    revert ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-ERC1155Receiver implementer\\n                    revert ERC1155InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a batch acceptance check by calling {IERC1155-onERC1155BatchReceived} on the `to` address\\n     * if it contains code at the moment of execution.\\n     */\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) private {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    // Tokens rejected\\n                    revert ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-ERC1155Receiver implementer\\n                    revert ERC1155InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Creates an array in memory with only one value for each of the elements provided.\\n     */\\n    function _asSingletonArrays(\\n        uint256 element1,\\n        uint256 element2\\n    ) private pure returns (uint256[] memory array1, uint256[] memory array2) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Load the free memory pointer\\n            array1 := mload(0x40)\\n            // Set array length to 1\\n            mstore(array1, 1)\\n            // Store the single element at the next word after the length (where content starts)\\n            mstore(add(array1, 0x20), element1)\\n\\n            // Repeat for next array locating it right after the first array\\n            array2 := add(array1, 0x40)\\n            mstore(array2, 1)\\n            mstore(add(array2, 0x20), element2)\\n\\n            // Update the free memory pointer by pointing after the second array\\n            mstore(0x40, add(array2, 0x40))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd9b0b8ee1ac6dfee14eb1ad4383a4739dbaa0f2036594bb3a16f0408085dadde\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6caffc9cfdc623eca9f87a686071708af5d5c17454d65022843fdddbc53c0cce\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe92b5e199b963d108ad6e06feeede151ba23849e0d064956535489ff967ffe68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Arrays.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\nimport {Math} from \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    using StorageSlot for bytes32;\\n\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getAddressSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getBytes32Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getUint256Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8806d620b6571932b662cfd48fbd518d4f70df1f88a23b5724cacde64a77bda1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"contracts/UrbanOdyssey.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"./lib/Structs.sol\\\";\\nimport \\\"./storage/OdysseyStorage.sol\\\";\\n\\ncontract UrbanOdyssey is ERC1155, OdysseyStorage {\\n    // URIs for each token type\\n    uint256 private constant ENERGY = 0;\\n    uint256 private constant CHIPS = 1;\\n    uint256 private locationCounter = 10;\\n\\n    constructor() ERC1155(\\\"UrbanOdyssey\\\") {\\n        deployer = msg.sender;\\n        tokenURIs[ENERGY] = \\\"https://ipfs.io/ipfs/bafybeihyr5454x44k6mthlibvzvwhezgql5ps25c4l7egd4df4fg4jzxwm\\\";\\n        tokenURIs[CHIPS] = \\\"https://ipfs.io/ipfs/bafkreietcrmhbmbutgglkg4g2mg2dep5b4d3ngdkbte4n3s53rzrxwihti\\\";\\n    }\\n\\n    function registerPlayer(\\n        string memory _name,\\n        string memory _homeTown,\\n        bytes32 _msgHash,\\n        bytes memory _signature,\\n        Structs.Faction _faction\\n    ) public {\\n        require(!isRegistered[msg.sender], \\\"Player is already registered.\\\");\\n        require(isVerified(_msgHash, _signature), \\\"Invalid Txn Source\\\");\\n\\n        // Set player info\\n        players[msg.sender] = Structs.Player({\\n            verifiedPlaces: 0,\\n            registeredPlaces: 0,\\n            isVerified: true,\\n            name: _name,\\n            hometown: _homeTown,\\n            faction: _faction\\n        });\\n\\n        isRegistered[msg.sender] = true;\\n\\n        // Mint +100 Energy/Chips based on faction\\n        if (_faction == Structs.Faction.EcoGuardian) {\\n            _mint(msg.sender, ENERGY, 1000, \\\"\\\");\\n        } else if (_faction == Structs.Faction.TechnoMad) {\\n            _mint(msg.sender, CHIPS, 1000, \\\"\\\");\\n        }\\n    }\\n\\n    //  TODO By Shyam: figure out verification part\\n    function registerAndVerifyPlace(string memory _locationName, string memory _locationType, string memory _uri)\\n        public\\n        payable\\n    {\\n        require(isRegistered[msg.sender], \\\"Only players can register places\\\");\\n\\n        // Check if the player has enough resources\\n        uint256 registrationCost = 200;\\n        if (players[msg.sender].faction == Structs.Faction.EcoGuardian) {\\n            // EcoGuardians use Energy\\n            require(balanceOf(msg.sender, ENERGY) >= registrationCost, \\\"Not enough Energy\\\");\\n            _burn(msg.sender, ENERGY, registrationCost);\\n        } else if (players[msg.sender].faction == Structs.Faction.EcoGuardian) {\\n            // TechnoMads use Chips\\n            require(balanceOf(msg.sender, CHIPS) >= registrationCost, \\\"Not enough Chips\\\");\\n            _burn(msg.sender, CHIPS, registrationCost);\\n        }\\n\\n        // Proceed with place registration\\n        locations[locationCounter] = Structs.Location({\\n            registeredBy: msg.sender,\\n            level: 0,\\n            placeName: _locationName,\\n            placeType: _locationType,\\n            faction: players[msg.sender].faction\\n        });\\n\\n        _mint(msg.sender, locationCounter, 1, \\\"\\\");\\n        tokenURIs[locationCounter] = _uri;\\n        ++locationCounter;\\n    }\\n\\n    function getAllLocations() public view returns (Structs.Location[] memory) {\\n        uint256 counter = locationCounter - 10;\\n        Structs.Location[] memory allLocations = new Structs.Location[](counter);\\n\\n        for (uint256 i = 10; i <= locationCounter; ++i) {\\n            allLocations[i].registeredBy = locations[i].registeredBy;\\n            allLocations[i].placeName = locations[i].placeName;\\n            allLocations[i].placeType = locations[i].placeType;\\n            allLocations[i].level = locations[i].level;\\n            allLocations[i].faction = locations[i].faction;\\n        }\\n\\n        return allLocations;\\n    }\\n\\n    // TODO: by shyam\\n    // verifyPlace(+100);\\n\\n    function upgradePlace(uint256 _locationId) public returns (bool success) {\\n        require(isRegistered[msg.sender], \\\"Only players can register places\\\");\\n        require(locations[_locationId].faction == players[msg.sender].faction, \\\"Faction Mismatch\\\");\\n\\n        uint256 upgradeCost = 1000;\\n        if (players[msg.sender].faction == Structs.Faction.EcoGuardian) {\\n            // EcoGuardians use Energy\\n            require(balanceOf(msg.sender, ENERGY) >= upgradeCost, \\\"Not enough Energy\\\");\\n            _burn(msg.sender, ENERGY, upgradeCost);\\n        } else if (players[msg.sender].faction == Structs.Faction.EcoGuardian) {\\n            // TechnoMads use Chips\\n            require(balanceOf(msg.sender, CHIPS) >= upgradeCost, \\\"Not enough Chips\\\");\\n            _burn(msg.sender, CHIPS, upgradeCost);\\n        }\\n\\n        ++locations[_locationId].level;\\n\\n        return true;\\n    }\\n\\n    // Function to set URI for a specific token\\n    // function _setUri(uint256 tokenId, string memory newUri) internal {\\n    //     require(bytes(newUri).length != 0, \\\"URI cannot be empty\\\");\\n    //     tokenURIs[tokenId] = newUri;\\n    //     emit URI(newUri, tokenId);\\n    // }\\n\\n    // Function to get a player's Energy balance\\n    function getENERGYBalance(address _player) external view returns (uint256) {\\n        return balanceOf(_player, ENERGY);\\n    }\\n\\n    // Function to get a player's Chips balance\\n    function getCHIPSBalance(address _player) external view returns (uint256) {\\n        return balanceOf(_player, CHIPS);\\n    }\\n\\n    function isVerified(bytes32 _messageHash, bytes memory _signature) public view returns (bool) {\\n        // The ethSignedMessageHash is the hash that the signer actually signed\\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(_messageHash);\\n\\n        // Recover the signer's address from the signature\\n        address signer = recoverSigner(ethSignedMessageHash, _signature);\\n\\n        require(signer == deployer, \\\"Unauthorized Contract call\\\");\\n\\n        return true;\\n    }\\n\\n    function getEthSignedMessageHash(bytes32 _messageHash) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _messageHash));\\n    }\\n\\n    function recoverSigner(bytes32 _ethSignedMessageHash, bytes memory _signature) public pure returns (address) {\\n        (uint8 v, bytes32 r, bytes32 s) = splitSignature(_signature);\\n        return ecrecover(_ethSignedMessageHash, v, r, s);\\n    }\\n\\n    function splitSignature(bytes memory sig) public pure returns (uint8, bytes32, bytes32) {\\n        require(sig.length == 65, \\\"invalid signature length\\\");\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        assembly {\\n            // first 32 bytes, after the length prefix\\n            r := mload(add(sig, 32))\\n            // second 32 bytes\\n            s := mload(add(sig, 64))\\n            // final byte (first byte of the next 32 bytes)\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n        return (v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0x90687e54cd8fc9db27aa2bc84a70d29361b5d8fee262e3860070d1618f874bc8\",\"license\":\"MIT\"},\"contracts/lib/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nlibrary Structs {\\n    struct Player {\\n        uint256 verifiedPlaces;\\n        uint256 registeredPlaces;\\n        bool isVerified;\\n        string name;\\n        string hometown;\\n        Faction faction;\\n    }\\n\\n    struct Location {\\n        address registeredBy;\\n        // decide on this\\n        // bytes32 Location;\\n        uint8 level;\\n        string placeName;\\n        string placeType;\\n        Faction faction;\\n    }\\n\\n    enum Faction {\\n        EcoGuardian,\\n        TechnoMad\\n    }\\n}\\n\",\"keccak256\":\"0xd31471238cba1935fd25fb8a39c54b859779a67f7f7bd98868deb808c9b8d257\",\"license\":\"MIT\"},\"contracts/storage/OdysseyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"../lib/Structs.sol\\\";\\n\\ncontract OdysseyStorage {\\n    address deployer;\\n\\n    mapping(uint256 => string) public tokenURIs;\\n\\n    mapping(address => Structs.Player) public players;\\n    mapping(address => bool) public isRegistered;\\n    mapping(uint256 locationId => Structs.Location) public locations;\\n}\\n\",\"keccak256\":\"0x638fe49f2c91694b35a9ac0f14df7414afa424b71ea4004323a7c11b13dce12b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600a6008553480156200001657600080fd5b5060408051808201909152600c81526b557262616e4f64797373657960a01b6020820152620000458162000102565b50600380546001600160a01b031916331790556040805160808101909152605080825262002b9f60208301396000805260046020527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec90620000a89082620001b9565b5060405180608001604052806050815260200162002b4f60509139600160005260046020527fabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe0590620000fb9082620001b9565b5062000285565b6002620001108282620001b9565b5050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200013f57607f821691505b6020821081036200016057634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001b457600081815260208120601f850160051c810160208610156200018f5750805b601f850160051c820191505b81811015620001b0578281556001016200019b565b5050505b505050565b81516001600160401b03811115620001d557620001d562000114565b620001ed81620001e684546200012a565b8462000166565b602080601f8311600181146200022557600084156200020c5750858301515b600019600386901b1c1916600185901b178555620001b0565b600085815260208120601f198616915b82811015620002565788860151825594840194600190910190840162000235565b5085821015620002755787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6128ba80620002956000396000f3fe6080604052600436106101345760003560e01c8063a7bb5803116100ab578063e985e9c51161006f578063e985e9c5146103e4578063f242432a14610404578063f5de81c314610424578063f629950a14610444578063fa54080114610457578063fda249421461047757600080fd5b8063a7bb5803146102f2578063b9e0db3514610331578063c226611b14610362578063c3c5a54714610382578063e2eb41ff146103b257600080fd5b80632eb2c2d6116100fd5780632eb2c2d61461020d5780634e1273f41461022d5780636c8b703f1461025a5780637fcacc0e1461027a57806397aba7f91461029a578063a22cb465146102d257600080fd5b8062fdd58e1461013957806301ffc9a71461016c5780630e89341c1461019c5780631076e967146101c95780632151ff62146101eb575b600080fd5b34801561014557600080fd5b50610159610154366004611dc6565b610497565b6040519081526020015b60405180910390f35b34801561017857600080fd5b5061018c610187366004611e09565b6104bf565b6040519015158152602001610163565b3480156101a857600080fd5b506101bc6101b7366004611e2d565b61050f565b6040516101639190611e8c565b3480156101d557600080fd5b506101de6105a3565b6040516101639190611ed7565b3480156101f757600080fd5b5061020b61020636600461204b565b61089c565b005b34801561021957600080fd5b5061020b610228366004612183565b610aab565b34801561023957600080fd5b5061024d61024836600461222c565b610b12565b6040516101639190612326565b34801561026657600080fd5b506101bc610275366004611e2d565b610be6565b34801561028657600080fd5b5061018c610295366004612339565b610c80565b3480156102a657600080fd5b506102ba6102b5366004612339565b610d05565b6040516001600160a01b039091168152602001610163565b3480156102de57600080fd5b5061020b6102ed366004612375565b610d84565b3480156102fe57600080fd5b5061031261030d3660046123b1565b610d93565b6040805160ff9094168452602084019290925290820152606001610163565b34801561033d57600080fd5b5061035161034c366004611e2d565b610e05565b6040516101639594939291906123ed565b34801561036e57600080fd5b5061018c61037d366004611e2d565b610f57565b34801561038e57600080fd5b5061018c61039d366004612446565b60066020526000908152604090205460ff1681565b3480156103be57600080fd5b506103d26103cd366004612446565b6111a2565b60405161016396959493929190612461565b3480156103f057600080fd5b5061018c6103ff3660046124b5565b6112f0565b34801561041057600080fd5b5061020b61041f3660046124e8565b61131e565b34801561043057600080fd5b5061015961043f366004612446565b61137d565b61020b61045236600461254c565b61138a565b34801561046357600080fd5b50610159610472366004611e2d565b611639565b34801561048357600080fd5b50610159610492366004612446565b61168c565b6000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b14806104f057506001600160e01b031982166303a24d0760e21b145b806104b957506301ffc9a760e01b6001600160e01b03198316146104b9565b60606002805461051e906125d3565b80601f016020809104026020016040519081016040528092919081815260200182805461054a906125d3565b80156105975780601f1061056c57610100808354040283529160200191610597565b820191906000526020600020905b81548152906001019060200180831161057a57829003601f168201915b50505050509050919050565b60606000600a6008546105b69190612623565b90506000816001600160401b038111156105d2576105d2611f96565b60405190808252806020026020018201604052801561060b57816020015b6105f8611d5f565b8152602001906001900390816105f05790505b509050600a5b60085481116108955760008181526007602052604090205482516001600160a01b039091169083908390811061064957610649612636565b6020908102919091018101516001600160a01b039092169091526000828152600790915260409020600101805461067f906125d3565b80601f01602080910402602001604051908101604052809291908181526020018280546106ab906125d3565b80156106f85780601f106106cd576101008083540402835291602001916106f8565b820191906000526020600020905b8154815290600101906020018083116106db57829003601f168201915b505050505082828151811061070f5761070f612636565b60200260200101516040018190525060076000828152602001908152602001600020600201805461073f906125d3565b80601f016020809104026020016040519081016040528092919081815260200182805461076b906125d3565b80156107b85780601f1061078d576101008083540402835291602001916107b8565b820191906000526020600020905b81548152906001019060200180831161079b57829003601f168201915b50505050508282815181106107cf576107cf612636565b6020026020010151606001819052506007600082815260200190815260200160002060000160149054906101000a900460ff1682828151811061081457610814612636565b60209081029190910181015160ff92831690820152600083815260079091526040902060030154835191169083908390811061085257610852612636565b602002602001015160800190600181111561086f5761086f611e9f565b9081600181111561088257610882611e9f565b90525061088e8161264c565b9050610611565b5092915050565b3360009081526006602052604090205460ff16156109015760405162461bcd60e51b815260206004820152601d60248201527f506c6179657220697320616c726561647920726567697374657265642e00000060448201526064015b60405180910390fd5b61090b8383610c80565b61094c5760405162461bcd60e51b8152602060048201526012602482015271496e76616c69642054786e20536f7572636560701b60448201526064016108f8565b6040518060c00160405280600081526020016000815260200160011515815260200186815260200185815260200182600181111561098c5761098c611e9f565b905233600090815260056020908152604091829020835181559083015160018201559082015160028201805460ff1916911515919091179055606082015160038201906109d990826126b0565b50608082015160048201906109ee90826126b0565b5060a082015160058201805460ff191660018381811115610a1157610a11611e9f565b021790555050336000908152600660205260408120805460ff191660011790559050816001811115610a4557610a45611e9f565b03610a6d57610a683360006103e860405180602001604052806000815250611699565b610aa4565b6001816001811115610a8157610a81611e9f565b03610aa457610aa43360016103e860405180602001604052806000815250611699565b5050505050565b336001600160a01b0386168114801590610acc5750610aca86826112f0565b155b15610afd5760405163711bec9160e11b81526001600160a01b038083166004830152871660248201526044016108f8565b610b0a86868686866116f6565b505050505050565b60608151835114610b435781518351604051635b05999160e01b8152600481019290925260248201526044016108f8565b600083516001600160401b03811115610b5e57610b5e611f96565b604051908082528060200260200182016040528015610b87578160200160208202803683370190505b50905060005b8451811015610bde57602080820286010151610bb190602080840287010151610497565b828281518110610bc357610bc3612636565b6020908102919091010152610bd78161264c565b9050610b8d565b509392505050565b60046020526000908152604090208054610bff906125d3565b80601f0160208091040260200160405190810160405280929190818152602001828054610c2b906125d3565b8015610c785780601f10610c4d57610100808354040283529160200191610c78565b820191906000526020600020905b815481529060010190602001808311610c5b57829003601f168201915b505050505081565b600080610c8c84611639565b90506000610c9a8285610d05565b6003549091506001600160a01b03808316911614610cfa5760405162461bcd60e51b815260206004820152601a60248201527f556e617574686f72697a656420436f6e74726163742063616c6c00000000000060448201526064016108f8565b506001949350505050565b600080600080610d1485610d93565b6040805160008152602081018083528b905260ff8516918101919091526060810183905260808101829052929550909350915060019060a0016020604051602081039080840390855afa158015610d6f573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b610d8f338383611756565b5050565b60008060008351604114610de95760405162461bcd60e51b815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e677468000000000000000060448201526064016108f8565b5050506020810151604082015160609092015160001a92909190565b600760205260009081526040902080546001820180546001600160a01b03831693600160a01b90930460ff16929190610e3d906125d3565b80601f0160208091040260200160405190810160405280929190818152602001828054610e69906125d3565b8015610eb65780601f10610e8b57610100808354040283529160200191610eb6565b820191906000526020600020905b815481529060010190602001808311610e9957829003601f168201915b505050505090806002018054610ecb906125d3565b80601f0160208091040260200160405190810160405280929190818152602001828054610ef7906125d3565b8015610f445780601f10610f1957610100808354040283529160200191610f44565b820191906000526020600020905b815481529060010190602001808311610f2757829003601f168201915b5050506003909301549192505060ff1685565b3360009081526006602052604081205460ff16610fb65760405162461bcd60e51b815260206004820181905260248201527f4f6e6c7920706c61796572732063616e20726567697374657220706c6163657360448201526064016108f8565b336000908152600560208190526040909120015460ff166001811115610fde57610fde611e9f565b60008381526007602052604090206003015460ff16600181111561100457611004611e9f565b146110445760405162461bcd60e51b815260206004820152601060248201526f08cc2c6e8d2dedc409ad2e6dac2e8c6d60831b60448201526064016108f8565b6103e86000336000908152600560208190526040909120015460ff16600181111561107157611071611e9f565b036110d55780611082336000610497565b10156110c45760405162461bcd60e51b81526020600482015260116024820152704e6f7420656e6f75676820456e6572677960781b60448201526064016108f8565b6110d0336000836117ec565b61115a565b3360009081526005602081905260408220015460ff1660018111156110fc576110fc611e9f565b0361115a578061110d336001610497565b101561114e5760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f75676820436869707360801b60448201526064016108f8565b61115a336001836117ec565b6000838152600760205260409020805460149061118090600160a01b900460ff1661276f565b91906101000a81548160ff021916908360ff1602179055506001915050919050565b60056020526000908152604090208054600182015460028301546003840180549394929360ff90921692916111d6906125d3565b80601f0160208091040260200160405190810160405280929190818152602001828054611202906125d3565b801561124f5780601f106112245761010080835404028352916020019161124f565b820191906000526020600020905b81548152906001019060200180831161123257829003601f168201915b505050505090806004018054611264906125d3565b80601f0160208091040260200160405190810160405280929190818152602001828054611290906125d3565b80156112dd5780601f106112b2576101008083540402835291602001916112dd565b820191906000526020600020905b8154815290600101906020018083116112c057829003601f168201915b5050506005909301549192505060ff1686565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b336001600160a01b038616811480159061133f575061133d86826112f0565b155b156113705760405163711bec9160e11b81526001600160a01b038083166004830152871660248201526044016108f8565b610b0a8686868686611854565b60006104b9826001610497565b3360009081526006602052604090205460ff166113e95760405162461bcd60e51b815260206004820181905260248201527f4f6e6c7920706c61796572732063616e20726567697374657220706c6163657360448201526064016108f8565b60c86000336000908152600560208190526040909120015460ff16600181111561141557611415611e9f565b036114795780611426336000610497565b10156114685760405162461bcd60e51b81526020600482015260116024820152704e6f7420656e6f75676820456e6572677960781b60448201526064016108f8565b611474336000836117ec565b6114fe565b3360009081526005602081905260408220015460ff1660018111156114a0576114a0611e9f565b036114fe57806114b1336001610497565b10156114f25760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f75676820436869707360801b60448201526064016108f8565b6114fe336001836117ec565b6040805160a0810182523380825260006020808401829052838501899052606084018890529181526005918290529290922090910154608082019060ff16600181111561154d5761154d611e9f565b9052600854600090815260076020908152604091829020835181549285015160ff16600160a01b026001600160a81b03199093166001600160a01b03909116179190911781559082015160018201906115a690826126b0565b50606082015160028201906115bb90826126b0565b50608082015160038201805460ff1916600183818111156115de576115de611e9f565b021790555090505061160433600854600160405180602001604052806000815250611699565b600854600090815260046020526040902061161f83826126b0565b5060086000815461162f9061264c565b9091555050505050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b60006104b9826000610497565b6001600160a01b0384166116c357604051632bfa23e760e11b8152600060048201526024016108f8565b60408051600180825260208201869052818301908152606082018590526080820190925290610b0a6000878484876118e2565b6001600160a01b03841661172057604051632bfa23e760e11b8152600060048201526024016108f8565b6001600160a01b03851661174957604051626a0d4560e21b8152600060048201526024016108f8565b610aa485858585856118e2565b6001600160a01b03821661177f5760405162ced3e160e81b8152600060048201526024016108f8565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b03831661181557604051626a0d4560e21b8152600060048201526024016108f8565b604080516001808252602082018590528183019081526060820184905260a08201909252600060808201818152919291610aa4918791859085906118e2565b6001600160a01b03841661187e57604051632bfa23e760e11b8152600060048201526024016108f8565b6001600160a01b0385166118a757604051626a0d4560e21b8152600060048201526024016108f8565b604080516001808252602082018690528183019081526060820185905260808201909252906118d987878484876118e2565b50505050505050565b6118ee85858585611935565b6001600160a01b03841615610aa457825133906001036119275760208481015190840151611920838989858589611b52565b5050610b0a565b610b0a818787878787611c76565b80518251146119645781518151604051635b05999160e01b8152600481019290925260248201526044016108f8565b3360005b8351811015611a73576020818102858101820151908501909101516001600160a01b03881615611a1b576000828152602081815260408083206001600160a01b038c168452909152902054818110156119f4576040516303dee4c560e01b81526001600160a01b038a1660048201526024810182905260448101839052606481018490526084016108f8565b6000838152602081815260408083206001600160a01b038d16845290915290209082900390555b6001600160a01b03871615611a60576000828152602081815260408083206001600160a01b038b16845290915281208054839290611a5a90849061278e565b90915550505b505080611a6c9061264c565b9050611968565b508251600103611af45760208301516000906020840151909150856001600160a01b0316876001600160a01b0316846001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628585604051611ae5929190918252602082015260400190565b60405180910390a45050610aa4565b836001600160a01b0316856001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611b439291906127a1565b60405180910390a45050505050565b6001600160a01b0384163b15610b0a5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611b9690899089908890889088906004016127cf565b6020604051808303816000875af1925050508015611bd1575060408051601f3d908101601f19168201909252611bce91810190612809565b60015b611c3a573d808015611bff576040519150601f19603f3d011682016040523d82523d6000602084013e611c04565b606091505b508051600003611c3257604051632bfa23e760e11b81526001600160a01b03861660048201526024016108f8565b805181602001fd5b6001600160e01b0319811663f23a6e6160e01b146118d957604051632bfa23e760e11b81526001600160a01b03861660048201526024016108f8565b6001600160a01b0384163b15610b0a5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611cba9089908990889088908890600401612826565b6020604051808303816000875af1925050508015611cf5575060408051601f3d908101601f19168201909252611cf291810190612809565b60015b611d23573d808015611bff576040519150601f19603f3d011682016040523d82523d6000602084013e611c04565b6001600160e01b0319811663bc197c8160e01b146118d957604051632bfa23e760e11b81526001600160a01b03861660048201526024016108f8565b6040518060a0016040528060006001600160a01b03168152602001600060ff168152602001606081526020016060815260200160006001811115611da557611da5611e9f565b905290565b80356001600160a01b0381168114611dc157600080fd5b919050565b60008060408385031215611dd957600080fd5b611de283611daa565b946020939093013593505050565b6001600160e01b031981168114611e0657600080fd5b50565b600060208284031215611e1b57600080fd5b8135611e2681611df0565b9392505050565b600060208284031215611e3f57600080fd5b5035919050565b6000815180845260005b81811015611e6c57602081850181015186830182015201611e50565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000611e266020830184611e46565b634e487b7160e01b600052602160045260246000fd5b60028110611ed357634e487b7160e01b600052602160045260246000fd5b9052565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015611f8857888303603f19018552815180516001600160a01b031684528781015160ff16888501528681015160a088860181905290611f4282870182611e46565b91505060608083015186830382880152611f5c8382611e46565b925050506080808301519250611f7481870184611eb5565b509588019593505090860190600101611efe565b509098975050505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611fd457611fd4611f96565b604052919050565b600082601f830112611fed57600080fd5b81356001600160401b0381111561200657612006611f96565b612019601f8201601f1916602001611fac565b81815284602083860101111561202e57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561206357600080fd5b85356001600160401b038082111561207a57600080fd5b61208689838a01611fdc565b9650602088013591508082111561209c57600080fd5b6120a889838a01611fdc565b95506040880135945060608801359150808211156120c557600080fd5b506120d288828901611fdc565b9250506080860135600281106120e757600080fd5b809150509295509295909350565b60006001600160401b0382111561210e5761210e611f96565b5060051b60200190565b600082601f83011261212957600080fd5b8135602061213e612139836120f5565b611fac565b82815260059290921b8401810191818101908684111561215d57600080fd5b8286015b848110156121785780358352918301918301612161565b509695505050505050565b600080600080600060a0868803121561219b57600080fd5b6121a486611daa565b94506121b260208701611daa565b935060408601356001600160401b03808211156121ce57600080fd5b6121da89838a01612118565b945060608801359150808211156121f057600080fd5b6121fc89838a01612118565b9350608088013591508082111561221257600080fd5b5061221f88828901611fdc565b9150509295509295909350565b6000806040838503121561223f57600080fd5b82356001600160401b038082111561225657600080fd5b818501915085601f83011261226a57600080fd5b8135602061227a612139836120f5565b82815260059290921b8401810191818101908984111561229957600080fd5b948201945b838610156122be576122af86611daa565b8252948201949082019061229e565b965050860135925050808211156122d457600080fd5b506122e185828601612118565b9150509250929050565b600081518084526020808501945080840160005b8381101561231b578151875295820195908201906001016122ff565b509495945050505050565b602081526000611e2660208301846122eb565b6000806040838503121561234c57600080fd5b8235915060208301356001600160401b0381111561236957600080fd5b6122e185828601611fdc565b6000806040838503121561238857600080fd5b61239183611daa565b9150602083013580151581146123a657600080fd5b809150509250929050565b6000602082840312156123c357600080fd5b81356001600160401b038111156123d957600080fd5b6123e584828501611fdc565b949350505050565b6001600160a01b038616815260ff8516602082015260a06040820181905260009061241a90830186611e46565b828103606084015261242c8186611e46565b91505061243c6080830184611eb5565b9695505050505050565b60006020828403121561245857600080fd5b611e2682611daa565b868152856020820152841515604082015260c06060820152600061248860c0830186611e46565b828103608084015261249a8186611e46565b9150506124aa60a0830184611eb5565b979650505050505050565b600080604083850312156124c857600080fd5b6124d183611daa565b91506124df60208401611daa565b90509250929050565b600080600080600060a0868803121561250057600080fd5b61250986611daa565b945061251760208701611daa565b9350604086013592506060860135915060808601356001600160401b0381111561254057600080fd5b61221f88828901611fdc565b60008060006060848603121561256157600080fd5b83356001600160401b038082111561257857600080fd5b61258487838801611fdc565b9450602086013591508082111561259a57600080fd5b6125a687838801611fdc565b935060408601359150808211156125bc57600080fd5b506125c986828701611fdc565b9150509250925092565b600181811c908216806125e757607f821691505b60208210810361260757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156104b9576104b961260d565b634e487b7160e01b600052603260045260246000fd5b60006001820161265e5761265e61260d565b5060010190565b601f8211156126ab57600081815260208120601f850160051c8101602086101561268c5750805b601f850160051c820191505b81811015610b0a57828155600101612698565b505050565b81516001600160401b038111156126c9576126c9611f96565b6126dd816126d784546125d3565b84612665565b602080601f83116001811461271257600084156126fa5750858301515b600019600386901b1c1916600185901b178555610b0a565b600085815260208120601f198616915b8281101561274157888601518255948401946001909101908401612722565b508582101561275f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060ff821660ff81036127855761278561260d565b60010192915050565b808201808211156104b9576104b961260d565b6040815260006127b460408301856122eb565b82810360208401526127c681856122eb565b95945050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906124aa90830184611e46565b60006020828403121561281b57600080fd5b8151611e2681611df0565b6001600160a01b0386811682528516602082015260a060408201819052600090612852908301866122eb565b828103606084015261286481866122eb565b905082810360808401526128788185611e46565b9897505050505050505056fea264697066735822122065439ee01774057a259e1cabca92c4276b2600f54ebc02d1b9be662f9fde2b0a64736f6c6343000814003368747470733a2f2f697066732e696f2f697066732f6261666b726569657463726d68626d62757467676c6b673467326d673264657035623464336e67646b627465346e33733533727a7278776968746968747470733a2f2f697066732e696f2f697066732f62616679626569687972353435347834346b366d74686c6962767a767768657a67716c357073323563346c37656764346466346667346a7a78776d",
  "deployedBytecode": "0x6080604052600436106101345760003560e01c8063a7bb5803116100ab578063e985e9c51161006f578063e985e9c5146103e4578063f242432a14610404578063f5de81c314610424578063f629950a14610444578063fa54080114610457578063fda249421461047757600080fd5b8063a7bb5803146102f2578063b9e0db3514610331578063c226611b14610362578063c3c5a54714610382578063e2eb41ff146103b257600080fd5b80632eb2c2d6116100fd5780632eb2c2d61461020d5780634e1273f41461022d5780636c8b703f1461025a5780637fcacc0e1461027a57806397aba7f91461029a578063a22cb465146102d257600080fd5b8062fdd58e1461013957806301ffc9a71461016c5780630e89341c1461019c5780631076e967146101c95780632151ff62146101eb575b600080fd5b34801561014557600080fd5b50610159610154366004611dc6565b610497565b6040519081526020015b60405180910390f35b34801561017857600080fd5b5061018c610187366004611e09565b6104bf565b6040519015158152602001610163565b3480156101a857600080fd5b506101bc6101b7366004611e2d565b61050f565b6040516101639190611e8c565b3480156101d557600080fd5b506101de6105a3565b6040516101639190611ed7565b3480156101f757600080fd5b5061020b61020636600461204b565b61089c565b005b34801561021957600080fd5b5061020b610228366004612183565b610aab565b34801561023957600080fd5b5061024d61024836600461222c565b610b12565b6040516101639190612326565b34801561026657600080fd5b506101bc610275366004611e2d565b610be6565b34801561028657600080fd5b5061018c610295366004612339565b610c80565b3480156102a657600080fd5b506102ba6102b5366004612339565b610d05565b6040516001600160a01b039091168152602001610163565b3480156102de57600080fd5b5061020b6102ed366004612375565b610d84565b3480156102fe57600080fd5b5061031261030d3660046123b1565b610d93565b6040805160ff9094168452602084019290925290820152606001610163565b34801561033d57600080fd5b5061035161034c366004611e2d565b610e05565b6040516101639594939291906123ed565b34801561036e57600080fd5b5061018c61037d366004611e2d565b610f57565b34801561038e57600080fd5b5061018c61039d366004612446565b60066020526000908152604090205460ff1681565b3480156103be57600080fd5b506103d26103cd366004612446565b6111a2565b60405161016396959493929190612461565b3480156103f057600080fd5b5061018c6103ff3660046124b5565b6112f0565b34801561041057600080fd5b5061020b61041f3660046124e8565b61131e565b34801561043057600080fd5b5061015961043f366004612446565b61137d565b61020b61045236600461254c565b61138a565b34801561046357600080fd5b50610159610472366004611e2d565b611639565b34801561048357600080fd5b50610159610492366004612446565b61168c565b6000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b14806104f057506001600160e01b031982166303a24d0760e21b145b806104b957506301ffc9a760e01b6001600160e01b03198316146104b9565b60606002805461051e906125d3565b80601f016020809104026020016040519081016040528092919081815260200182805461054a906125d3565b80156105975780601f1061056c57610100808354040283529160200191610597565b820191906000526020600020905b81548152906001019060200180831161057a57829003601f168201915b50505050509050919050565b60606000600a6008546105b69190612623565b90506000816001600160401b038111156105d2576105d2611f96565b60405190808252806020026020018201604052801561060b57816020015b6105f8611d5f565b8152602001906001900390816105f05790505b509050600a5b60085481116108955760008181526007602052604090205482516001600160a01b039091169083908390811061064957610649612636565b6020908102919091018101516001600160a01b039092169091526000828152600790915260409020600101805461067f906125d3565b80601f01602080910402602001604051908101604052809291908181526020018280546106ab906125d3565b80156106f85780601f106106cd576101008083540402835291602001916106f8565b820191906000526020600020905b8154815290600101906020018083116106db57829003601f168201915b505050505082828151811061070f5761070f612636565b60200260200101516040018190525060076000828152602001908152602001600020600201805461073f906125d3565b80601f016020809104026020016040519081016040528092919081815260200182805461076b906125d3565b80156107b85780601f1061078d576101008083540402835291602001916107b8565b820191906000526020600020905b81548152906001019060200180831161079b57829003601f168201915b50505050508282815181106107cf576107cf612636565b6020026020010151606001819052506007600082815260200190815260200160002060000160149054906101000a900460ff1682828151811061081457610814612636565b60209081029190910181015160ff92831690820152600083815260079091526040902060030154835191169083908390811061085257610852612636565b602002602001015160800190600181111561086f5761086f611e9f565b9081600181111561088257610882611e9f565b90525061088e8161264c565b9050610611565b5092915050565b3360009081526006602052604090205460ff16156109015760405162461bcd60e51b815260206004820152601d60248201527f506c6179657220697320616c726561647920726567697374657265642e00000060448201526064015b60405180910390fd5b61090b8383610c80565b61094c5760405162461bcd60e51b8152602060048201526012602482015271496e76616c69642054786e20536f7572636560701b60448201526064016108f8565b6040518060c00160405280600081526020016000815260200160011515815260200186815260200185815260200182600181111561098c5761098c611e9f565b905233600090815260056020908152604091829020835181559083015160018201559082015160028201805460ff1916911515919091179055606082015160038201906109d990826126b0565b50608082015160048201906109ee90826126b0565b5060a082015160058201805460ff191660018381811115610a1157610a11611e9f565b021790555050336000908152600660205260408120805460ff191660011790559050816001811115610a4557610a45611e9f565b03610a6d57610a683360006103e860405180602001604052806000815250611699565b610aa4565b6001816001811115610a8157610a81611e9f565b03610aa457610aa43360016103e860405180602001604052806000815250611699565b5050505050565b336001600160a01b0386168114801590610acc5750610aca86826112f0565b155b15610afd5760405163711bec9160e11b81526001600160a01b038083166004830152871660248201526044016108f8565b610b0a86868686866116f6565b505050505050565b60608151835114610b435781518351604051635b05999160e01b8152600481019290925260248201526044016108f8565b600083516001600160401b03811115610b5e57610b5e611f96565b604051908082528060200260200182016040528015610b87578160200160208202803683370190505b50905060005b8451811015610bde57602080820286010151610bb190602080840287010151610497565b828281518110610bc357610bc3612636565b6020908102919091010152610bd78161264c565b9050610b8d565b509392505050565b60046020526000908152604090208054610bff906125d3565b80601f0160208091040260200160405190810160405280929190818152602001828054610c2b906125d3565b8015610c785780601f10610c4d57610100808354040283529160200191610c78565b820191906000526020600020905b815481529060010190602001808311610c5b57829003601f168201915b505050505081565b600080610c8c84611639565b90506000610c9a8285610d05565b6003549091506001600160a01b03808316911614610cfa5760405162461bcd60e51b815260206004820152601a60248201527f556e617574686f72697a656420436f6e74726163742063616c6c00000000000060448201526064016108f8565b506001949350505050565b600080600080610d1485610d93565b6040805160008152602081018083528b905260ff8516918101919091526060810183905260808101829052929550909350915060019060a0016020604051602081039080840390855afa158015610d6f573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b610d8f338383611756565b5050565b60008060008351604114610de95760405162461bcd60e51b815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e677468000000000000000060448201526064016108f8565b5050506020810151604082015160609092015160001a92909190565b600760205260009081526040902080546001820180546001600160a01b03831693600160a01b90930460ff16929190610e3d906125d3565b80601f0160208091040260200160405190810160405280929190818152602001828054610e69906125d3565b8015610eb65780601f10610e8b57610100808354040283529160200191610eb6565b820191906000526020600020905b815481529060010190602001808311610e9957829003601f168201915b505050505090806002018054610ecb906125d3565b80601f0160208091040260200160405190810160405280929190818152602001828054610ef7906125d3565b8015610f445780601f10610f1957610100808354040283529160200191610f44565b820191906000526020600020905b815481529060010190602001808311610f2757829003601f168201915b5050506003909301549192505060ff1685565b3360009081526006602052604081205460ff16610fb65760405162461bcd60e51b815260206004820181905260248201527f4f6e6c7920706c61796572732063616e20726567697374657220706c6163657360448201526064016108f8565b336000908152600560208190526040909120015460ff166001811115610fde57610fde611e9f565b60008381526007602052604090206003015460ff16600181111561100457611004611e9f565b146110445760405162461bcd60e51b815260206004820152601060248201526f08cc2c6e8d2dedc409ad2e6dac2e8c6d60831b60448201526064016108f8565b6103e86000336000908152600560208190526040909120015460ff16600181111561107157611071611e9f565b036110d55780611082336000610497565b10156110c45760405162461bcd60e51b81526020600482015260116024820152704e6f7420656e6f75676820456e6572677960781b60448201526064016108f8565b6110d0336000836117ec565b61115a565b3360009081526005602081905260408220015460ff1660018111156110fc576110fc611e9f565b0361115a578061110d336001610497565b101561114e5760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f75676820436869707360801b60448201526064016108f8565b61115a336001836117ec565b6000838152600760205260409020805460149061118090600160a01b900460ff1661276f565b91906101000a81548160ff021916908360ff1602179055506001915050919050565b60056020526000908152604090208054600182015460028301546003840180549394929360ff90921692916111d6906125d3565b80601f0160208091040260200160405190810160405280929190818152602001828054611202906125d3565b801561124f5780601f106112245761010080835404028352916020019161124f565b820191906000526020600020905b81548152906001019060200180831161123257829003601f168201915b505050505090806004018054611264906125d3565b80601f0160208091040260200160405190810160405280929190818152602001828054611290906125d3565b80156112dd5780601f106112b2576101008083540402835291602001916112dd565b820191906000526020600020905b8154815290600101906020018083116112c057829003601f168201915b5050506005909301549192505060ff1686565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b336001600160a01b038616811480159061133f575061133d86826112f0565b155b156113705760405163711bec9160e11b81526001600160a01b038083166004830152871660248201526044016108f8565b610b0a8686868686611854565b60006104b9826001610497565b3360009081526006602052604090205460ff166113e95760405162461bcd60e51b815260206004820181905260248201527f4f6e6c7920706c61796572732063616e20726567697374657220706c6163657360448201526064016108f8565b60c86000336000908152600560208190526040909120015460ff16600181111561141557611415611e9f565b036114795780611426336000610497565b10156114685760405162461bcd60e51b81526020600482015260116024820152704e6f7420656e6f75676820456e6572677960781b60448201526064016108f8565b611474336000836117ec565b6114fe565b3360009081526005602081905260408220015460ff1660018111156114a0576114a0611e9f565b036114fe57806114b1336001610497565b10156114f25760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f75676820436869707360801b60448201526064016108f8565b6114fe336001836117ec565b6040805160a0810182523380825260006020808401829052838501899052606084018890529181526005918290529290922090910154608082019060ff16600181111561154d5761154d611e9f565b9052600854600090815260076020908152604091829020835181549285015160ff16600160a01b026001600160a81b03199093166001600160a01b03909116179190911781559082015160018201906115a690826126b0565b50606082015160028201906115bb90826126b0565b50608082015160038201805460ff1916600183818111156115de576115de611e9f565b021790555090505061160433600854600160405180602001604052806000815250611699565b600854600090815260046020526040902061161f83826126b0565b5060086000815461162f9061264c565b9091555050505050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b60006104b9826000610497565b6001600160a01b0384166116c357604051632bfa23e760e11b8152600060048201526024016108f8565b60408051600180825260208201869052818301908152606082018590526080820190925290610b0a6000878484876118e2565b6001600160a01b03841661172057604051632bfa23e760e11b8152600060048201526024016108f8565b6001600160a01b03851661174957604051626a0d4560e21b8152600060048201526024016108f8565b610aa485858585856118e2565b6001600160a01b03821661177f5760405162ced3e160e81b8152600060048201526024016108f8565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b03831661181557604051626a0d4560e21b8152600060048201526024016108f8565b604080516001808252602082018590528183019081526060820184905260a08201909252600060808201818152919291610aa4918791859085906118e2565b6001600160a01b03841661187e57604051632bfa23e760e11b8152600060048201526024016108f8565b6001600160a01b0385166118a757604051626a0d4560e21b8152600060048201526024016108f8565b604080516001808252602082018690528183019081526060820185905260808201909252906118d987878484876118e2565b50505050505050565b6118ee85858585611935565b6001600160a01b03841615610aa457825133906001036119275760208481015190840151611920838989858589611b52565b5050610b0a565b610b0a818787878787611c76565b80518251146119645781518151604051635b05999160e01b8152600481019290925260248201526044016108f8565b3360005b8351811015611a73576020818102858101820151908501909101516001600160a01b03881615611a1b576000828152602081815260408083206001600160a01b038c168452909152902054818110156119f4576040516303dee4c560e01b81526001600160a01b038a1660048201526024810182905260448101839052606481018490526084016108f8565b6000838152602081815260408083206001600160a01b038d16845290915290209082900390555b6001600160a01b03871615611a60576000828152602081815260408083206001600160a01b038b16845290915281208054839290611a5a90849061278e565b90915550505b505080611a6c9061264c565b9050611968565b508251600103611af45760208301516000906020840151909150856001600160a01b0316876001600160a01b0316846001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628585604051611ae5929190918252602082015260400190565b60405180910390a45050610aa4565b836001600160a01b0316856001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611b439291906127a1565b60405180910390a45050505050565b6001600160a01b0384163b15610b0a5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611b9690899089908890889088906004016127cf565b6020604051808303816000875af1925050508015611bd1575060408051601f3d908101601f19168201909252611bce91810190612809565b60015b611c3a573d808015611bff576040519150601f19603f3d011682016040523d82523d6000602084013e611c04565b606091505b508051600003611c3257604051632bfa23e760e11b81526001600160a01b03861660048201526024016108f8565b805181602001fd5b6001600160e01b0319811663f23a6e6160e01b146118d957604051632bfa23e760e11b81526001600160a01b03861660048201526024016108f8565b6001600160a01b0384163b15610b0a5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611cba9089908990889088908890600401612826565b6020604051808303816000875af1925050508015611cf5575060408051601f3d908101601f19168201909252611cf291810190612809565b60015b611d23573d808015611bff576040519150601f19603f3d011682016040523d82523d6000602084013e611c04565b6001600160e01b0319811663bc197c8160e01b146118d957604051632bfa23e760e11b81526001600160a01b03861660048201526024016108f8565b6040518060a0016040528060006001600160a01b03168152602001600060ff168152602001606081526020016060815260200160006001811115611da557611da5611e9f565b905290565b80356001600160a01b0381168114611dc157600080fd5b919050565b60008060408385031215611dd957600080fd5b611de283611daa565b946020939093013593505050565b6001600160e01b031981168114611e0657600080fd5b50565b600060208284031215611e1b57600080fd5b8135611e2681611df0565b9392505050565b600060208284031215611e3f57600080fd5b5035919050565b6000815180845260005b81811015611e6c57602081850181015186830182015201611e50565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000611e266020830184611e46565b634e487b7160e01b600052602160045260246000fd5b60028110611ed357634e487b7160e01b600052602160045260246000fd5b9052565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015611f8857888303603f19018552815180516001600160a01b031684528781015160ff16888501528681015160a088860181905290611f4282870182611e46565b91505060608083015186830382880152611f5c8382611e46565b925050506080808301519250611f7481870184611eb5565b509588019593505090860190600101611efe565b509098975050505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611fd457611fd4611f96565b604052919050565b600082601f830112611fed57600080fd5b81356001600160401b0381111561200657612006611f96565b612019601f8201601f1916602001611fac565b81815284602083860101111561202e57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561206357600080fd5b85356001600160401b038082111561207a57600080fd5b61208689838a01611fdc565b9650602088013591508082111561209c57600080fd5b6120a889838a01611fdc565b95506040880135945060608801359150808211156120c557600080fd5b506120d288828901611fdc565b9250506080860135600281106120e757600080fd5b809150509295509295909350565b60006001600160401b0382111561210e5761210e611f96565b5060051b60200190565b600082601f83011261212957600080fd5b8135602061213e612139836120f5565b611fac565b82815260059290921b8401810191818101908684111561215d57600080fd5b8286015b848110156121785780358352918301918301612161565b509695505050505050565b600080600080600060a0868803121561219b57600080fd5b6121a486611daa565b94506121b260208701611daa565b935060408601356001600160401b03808211156121ce57600080fd5b6121da89838a01612118565b945060608801359150808211156121f057600080fd5b6121fc89838a01612118565b9350608088013591508082111561221257600080fd5b5061221f88828901611fdc565b9150509295509295909350565b6000806040838503121561223f57600080fd5b82356001600160401b038082111561225657600080fd5b818501915085601f83011261226a57600080fd5b8135602061227a612139836120f5565b82815260059290921b8401810191818101908984111561229957600080fd5b948201945b838610156122be576122af86611daa565b8252948201949082019061229e565b965050860135925050808211156122d457600080fd5b506122e185828601612118565b9150509250929050565b600081518084526020808501945080840160005b8381101561231b578151875295820195908201906001016122ff565b509495945050505050565b602081526000611e2660208301846122eb565b6000806040838503121561234c57600080fd5b8235915060208301356001600160401b0381111561236957600080fd5b6122e185828601611fdc565b6000806040838503121561238857600080fd5b61239183611daa565b9150602083013580151581146123a657600080fd5b809150509250929050565b6000602082840312156123c357600080fd5b81356001600160401b038111156123d957600080fd5b6123e584828501611fdc565b949350505050565b6001600160a01b038616815260ff8516602082015260a06040820181905260009061241a90830186611e46565b828103606084015261242c8186611e46565b91505061243c6080830184611eb5565b9695505050505050565b60006020828403121561245857600080fd5b611e2682611daa565b868152856020820152841515604082015260c06060820152600061248860c0830186611e46565b828103608084015261249a8186611e46565b9150506124aa60a0830184611eb5565b979650505050505050565b600080604083850312156124c857600080fd5b6124d183611daa565b91506124df60208401611daa565b90509250929050565b600080600080600060a0868803121561250057600080fd5b61250986611daa565b945061251760208701611daa565b9350604086013592506060860135915060808601356001600160401b0381111561254057600080fd5b61221f88828901611fdc565b60008060006060848603121561256157600080fd5b83356001600160401b038082111561257857600080fd5b61258487838801611fdc565b9450602086013591508082111561259a57600080fd5b6125a687838801611fdc565b935060408601359150808211156125bc57600080fd5b506125c986828701611fdc565b9150509250925092565b600181811c908216806125e757607f821691505b60208210810361260757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156104b9576104b961260d565b634e487b7160e01b600052603260045260246000fd5b60006001820161265e5761265e61260d565b5060010190565b601f8211156126ab57600081815260208120601f850160051c8101602086101561268c5750805b601f850160051c820191505b81811015610b0a57828155600101612698565b505050565b81516001600160401b038111156126c9576126c9611f96565b6126dd816126d784546125d3565b84612665565b602080601f83116001811461271257600084156126fa5750858301515b600019600386901b1c1916600185901b178555610b0a565b600085815260208120601f198616915b8281101561274157888601518255948401946001909101908401612722565b508582101561275f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060ff821660ff81036127855761278561260d565b60010192915050565b808201808211156104b9576104b961260d565b6040815260006127b460408301856122eb565b82810360208401526127c681856122eb565b95945050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906124aa90830184611e46565b60006020828403121561281b57600080fd5b8151611e2681611df0565b6001600160a01b0386811682528516602082015260a060408201819052600090612852908301866122eb565b828103606084015261286481866122eb565b905082810360808401526128788185611e46565b9897505050505050505056fea264697066735822122065439ee01774057a259e1cabca92c4276b2600f54ebc02d1b9be662f9fde2b0a64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC1155InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC1155InvalidArrayLength(uint256,uint256)": [
        {
          "details": "Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.",
          "params": {
            "idsLength": "Length of the array of token identifiers",
            "valuesLength": "Length of the array of token amounts"
          }
        }
      ],
      "ERC1155InvalidOperator(address)": [
        {
          "details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC1155InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC1155InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC1155MissingApprovalForAll(address,address)": [
        {
          "details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner.",
            "owner": "Address of the current owner of a token."
          }
        }
      ]
    },
    "events": {
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."
      },
      "TransferBatch(address,address,address,uint256[],uint256[])": {
        "details": "Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."
      },
      "TransferSingle(address,address,address,uint256,uint256)": {
        "details": "Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`."
      },
      "URI(string,uint256)": {
        "details": "Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 178,
        "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 184,
        "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 186,
        "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 3387,
        "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
        "label": "deployer",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3391,
        "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
        "label": "tokenURIs",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 3396,
        "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
        "label": "players",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Player)3366_storage)"
      },
      {
        "astId": 3400,
        "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
        "label": "isRegistered",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3405,
        "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
        "label": "locations",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(Location)3378_storage)"
      },
      {
        "astId": 2799,
        "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
        "label": "locationCounter",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(Faction)3381": {
        "encoding": "inplace",
        "label": "enum Structs.Faction",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(Player)3366_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Structs.Player)",
        "numberOfBytes": "32",
        "value": "t_struct(Player)3366_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Location)3378_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Structs.Location)",
        "numberOfBytes": "32",
        "value": "t_struct(Location)3378_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Location)3378_storage": {
        "encoding": "inplace",
        "label": "struct Structs.Location",
        "members": [
          {
            "astId": 3368,
            "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
            "label": "registeredBy",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3370,
            "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
            "label": "level",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3372,
            "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
            "label": "placeName",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3374,
            "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
            "label": "placeType",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 3377,
            "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
            "label": "faction",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(Faction)3381"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Player)3366_storage": {
        "encoding": "inplace",
        "label": "struct Structs.Player",
        "members": [
          {
            "astId": 3354,
            "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
            "label": "verifiedPlaces",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3356,
            "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
            "label": "registeredPlaces",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3358,
            "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
            "label": "isVerified",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 3360,
            "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
            "label": "name",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 3362,
            "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
            "label": "hometown",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 3365,
            "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
            "label": "faction",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(Faction)3381"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
