{
  "address": "0x4ce6ec617d7debc5c1cf3386e5bf0927cacfff8b",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        }
      ],
      "name": "getCHIPSBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        }
      ],
      "name": "getENERGYBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_messageHash",
          "type": "bytes32"
        }
      ],
      "name": "getEthSignedMessageHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_messageHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "isVerified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "locationId",
          "type": "uint256"
        }
      ],
      "name": "locations",
      "outputs": [
        {
          "internalType": "address",
          "name": "registeredBy",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "level",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "placeName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "placeType",
          "type": "string"
        },
        {
          "internalType": "enum Structs.Faction",
          "name": "faction",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "players",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "verifiedPlaces",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "registeredPlaces",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isVerified",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "hometown",
          "type": "string"
        },
        {
          "internalType": "enum Structs.Faction",
          "name": "faction",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ethSignedMessageHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "recoverSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_locationName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_locationType",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "registerAndVerifyPlace",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_homeTown",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_msgHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        },
        {
          "internalType": "enum Structs.Faction",
          "name": "_faction",
          "type": "uint8"
        }
      ],
      "name": "registerPlayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "splitSignature",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenURIs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_locationId",
          "type": "uint256"
        }
      ],
      "name": "upgradePlace",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x179f8bac8271352cbd4aa784b3de3c25e1a65f3a0985195132660c89a8ec60f7",
  "receipt": {
    "to": null,
    "from": "0x52fA3cD7C8926CF515a454658A27d710CF447b2f",
    "contractAddress": "0x58864Ac09A3eFBd2bd2e05014e6D2d7dF6c9f6da",
    "transactionIndex": 0,
    "gasUsed": "2570810",
    "logsBloom": "0x
    "blockHash": "0xc58de64d26af5fc2c4a0d7daf42caf95dbb1793f344314725b9105915127c79f",
    "transactionHash": "0x179f8bac8271352cbd4aa784b3de3c25e1a65f3a0985195132660c89a8ec60f7",
    "logs": [],
    "blockNumber": 3005991,
    "cumulativeGasUsed": "2570810",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "8d5b749312fad4a9ffcc7d3d11b755cf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getCHIPSBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getENERGYBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_messageHash\",\"type\":\"bytes32\"}],\"name\":\"getEthSignedMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_messageHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isVerified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"locationId\",\"type\":\"uint256\"}],\"name\":\"locations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"registeredBy\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"placeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"placeType\",\"type\":\"string\"},{\"internalType\":\"enum Structs.Faction\",\"name\":\"faction\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"verifiedPlaces\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registeredPlaces\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"hometown\",\"type\":\"string\"},{\"internalType\":\"enum Structs.Faction\",\"name\":\"faction\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ethSignedMessageHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"recoverSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_locationName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_locationType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"registerAndVerifyPlace\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_homeTown\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_msgHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"enum Structs.Faction\",\"name\":\"_faction\",\"type\":\"uint8\"}],\"name\":\"registerPlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"splitSignature\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenURIs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_locationId\",\"type\":\"uint256\"}],\"name\":\"upgradePlace\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UrbanOdyssey.sol\":\"UrbanOdyssey\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x81149353c99ccf8ff18af7701bc3f38665c7a97e344cdc0d27f927f03d22af0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/UrbanOdyssey.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"./lib/Structs.sol\\\";\\nimport \\\"./storage/OdysseyStorage.sol\\\";\\n\\ncontract UrbanOdyssey is ERC1155, OdysseyStorage {\\n\\t// URIs for each token type\\n\\tuint256 private constant ENERGY = 0;\\n\\tuint256 private constant CHIPS = 1;\\n\\tuint256 private locationCounter = 10;\\n\\n\\tconstructor() ERC1155(\\\"UrbanOdyssey\\\") {\\n\\t\\tdeployer = msg.sender;\\n\\t\\ttokenURIs[\\n\\t\\t\\tENERGY\\n\\t\\t] = \\\"https://ipfs.io/ipfs/bafybeihyr5454x44k6mthlibvzvwhezgql5ps25c4l7egd4df4fg4jzxwm\\\";\\n\\t\\ttokenURIs[\\n\\t\\t\\tCHIPS\\n\\t\\t] = \\\"https://ipfs.io/ipfs/bafkreietcrmhbmbutgglkg4g2mg2dep5b4d3ngdkbte4n3s53rzrxwihti\\\";\\n\\t}\\n\\n\\tfunction registerPlayer(\\n\\t\\tstring memory _name,\\n\\t\\tstring memory _homeTown,\\n\\t\\tbytes32 _msgHash,\\n\\t\\tbytes memory _signature,\\n\\t\\tStructs.Faction _faction\\n\\t) public {\\n\\t\\trequire(!isRegistered[msg.sender], \\\"Player is already registered.\\\");\\n\\t\\trequire(isVerified(_msgHash, _signature), \\\"Invalid Txn Source\\\");\\n\\n\\t\\t// Set player info\\n\\t\\tplayers[msg.sender] = Structs.Player({\\n\\t\\t\\tverifiedPlaces: 0,\\n\\t\\t\\tregisteredPlaces: 0,\\n\\t\\t\\tisVerified: true,\\n\\t\\t\\tname: _name,\\n\\t\\t\\thometown: _homeTown,\\n\\t\\t\\tfaction: _faction\\n\\t\\t});\\n\\n\\t\\tisRegistered[msg.sender] = true;\\n\\n\\t\\t// Mint +100 Energy/Chips based on faction\\n\\t\\tif (_faction == Structs.Faction.EcoGuardian) {\\n\\t\\t\\t_mint(msg.sender, ENERGY, 1000, \\\"\\\");\\n\\t\\t} else if (_faction == Structs.Faction.TechnoMad) {\\n\\t\\t\\t_mint(msg.sender, CHIPS, 1000, \\\"\\\");\\n\\t\\t}\\n\\t}\\n\\n\\t//  TODO By Shyam: figure out verification part\\n\\tfunction registerAndVerifyPlace(\\n\\t\\tstring memory _locationName,\\n\\t\\tstring memory _locationType,\\n\\t\\tstring memory _uri\\n\\t) public payable {\\n\\t\\trequire(isRegistered[msg.sender], \\\"Only players can register places\\\");\\n\\n\\t\\t// Check if the player has enough resources\\n\\t\\tuint256 registrationCost = 200;\\n\\t\\tif (players[msg.sender].faction == Structs.Faction.EcoGuardian) {\\n\\t\\t\\t// EcoGuardians use Energy\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tbalanceOf(msg.sender, ENERGY) >= registrationCost,\\n\\t\\t\\t\\t\\\"Not enough Energy\\\"\\n\\t\\t\\t);\\n\\t\\t\\t_burn(msg.sender, ENERGY, registrationCost);\\n\\t\\t} else if (players[msg.sender].faction == Structs.Faction.EcoGuardian) {\\n\\t\\t\\t// TechnoMads use Chips\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tbalanceOf(msg.sender, CHIPS) >= registrationCost,\\n\\t\\t\\t\\t\\\"Not enough Chips\\\"\\n\\t\\t\\t);\\n\\t\\t\\t_burn(msg.sender, CHIPS, registrationCost);\\n\\t\\t}\\n\\n\\t\\t// Proceed with place registration\\n\\t\\tlocations[locationCounter] = Structs.Location({\\n\\t\\t\\tregisteredBy: msg.sender,\\n\\t\\t\\tlevel: 0,\\n\\t\\t\\tplaceName: _locationName,\\n\\t\\t\\tplaceType: _locationType,\\n\\t\\t\\tfaction: players[msg.sender].faction\\n\\t\\t});\\n\\n\\t\\t++locationCounter;\\n\\t\\t_mint(msg.sender, locationCounter, 1, \\\"\\\");\\n\\t\\ttokenURIs[locationCounter] = _uri;\\n\\t}\\n\\n\\t// TODO: by shyam\\n\\t// verifyPlace(+100);\\n\\n\\tfunction upgradePlace(uint256 _locationId) public returns (bool success) {\\n\\t\\trequire(isRegistered[msg.sender], \\\"Only players can register places\\\");\\n\\t\\trequire(\\n\\t\\t\\tlocations[_locationId].faction == players[msg.sender].faction,\\n\\t\\t\\t\\\"Faction Mismatch\\\"\\n\\t\\t);\\n\\n\\t\\tuint256 upgradeCost = 1000;\\n\\t\\tif (players[msg.sender].faction == Structs.Faction.EcoGuardian) {\\n\\t\\t\\t// EcoGuardians use Energy\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tbalanceOf(msg.sender, ENERGY) >= upgradeCost,\\n\\t\\t\\t\\t\\\"Not enough Energy\\\"\\n\\t\\t\\t);\\n\\t\\t\\t_burn(msg.sender, ENERGY, upgradeCost);\\n\\t\\t} else if (players[msg.sender].faction == Structs.Faction.EcoGuardian) {\\n\\t\\t\\t// TechnoMads use Chips\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tbalanceOf(msg.sender, CHIPS) >= upgradeCost,\\n\\t\\t\\t\\t\\\"Not enough Chips\\\"\\n\\t\\t\\t);\\n\\t\\t\\t_burn(msg.sender, CHIPS, upgradeCost);\\n\\t\\t}\\n\\n\\t\\t++locations[_locationId].level;\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t// Function to set URI for a specific token\\n\\t// function _setUri(uint256 tokenId, string memory newUri) internal {\\n\\t//     require(bytes(newUri).length != 0, \\\"URI cannot be empty\\\");\\n\\t//     tokenURIs[tokenId] = newUri;\\n\\t//     emit URI(newUri, tokenId);\\n\\t// }\\n\\n\\t// Function to get a player's Energy balance\\n\\tfunction getENERGYBalance(address _player) external view returns (uint256) {\\n\\t\\treturn balanceOf(_player, ENERGY);\\n\\t}\\n\\n\\t// Function to get a player's Chips balance\\n\\tfunction getCHIPSBalance(address _player) external view returns (uint256) {\\n\\t\\treturn balanceOf(_player, CHIPS);\\n\\t}\\n\\n\\tfunction isVerified(\\n\\t\\tbytes32 _messageHash,\\n\\t\\tbytes memory _signature\\n\\t) public view returns (bool) {\\n\\t\\t// The ethSignedMessageHash is the hash that the signer actually signed\\n\\t\\tbytes32 ethSignedMessageHash = getEthSignedMessageHash(_messageHash);\\n\\n\\t\\t// Recover the signer's address from the signature\\n\\t\\taddress signer = recoverSigner(ethSignedMessageHash, _signature);\\n\\n\\t\\trequire(signer == deployer, \\\"Unauthorized Contract call\\\");\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction getEthSignedMessageHash(\\n\\t\\tbytes32 _messageHash\\n\\t) public pure returns (bytes32) {\\n\\t\\treturn\\n\\t\\t\\tkeccak256(\\n\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n\\t\\t\\t\\t\\t_messageHash\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t}\\n\\n\\tfunction recoverSigner(\\n\\t\\tbytes32 _ethSignedMessageHash,\\n\\t\\tbytes memory _signature\\n\\t) public pure returns (address) {\\n\\t\\t(uint8 v, bytes32 r, bytes32 s) = splitSignature(_signature);\\n\\t\\treturn ecrecover(_ethSignedMessageHash, v, r, s);\\n\\t}\\n\\n\\tfunction splitSignature(\\n\\t\\tbytes memory sig\\n\\t) public pure returns (uint8, bytes32, bytes32) {\\n\\t\\trequire(sig.length == 65, \\\"invalid signature length\\\");\\n\\t\\tbytes32 r;\\n\\t\\tbytes32 s;\\n\\t\\tuint8 v;\\n\\n\\t\\tassembly {\\n\\t\\t\\t// first 32 bytes, after the length prefix\\n\\t\\t\\tr := mload(add(sig, 32))\\n\\t\\t\\t// second 32 bytes\\n\\t\\t\\ts := mload(add(sig, 64))\\n\\t\\t\\t// final byte (first byte of the next 32 bytes)\\n\\t\\t\\tv := byte(0, mload(add(sig, 96)))\\n\\t\\t}\\n\\t\\treturn (v, r, s);\\n\\t}\\n}\\n\",\"keccak256\":\"0x909ea3c49de30d5c4707f71e21cdcbdb934c508c9f30ffac98bb724d32774945\",\"license\":\"MIT\"},\"contracts/lib/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nlibrary Structs {\\n    struct Player {\\n        uint256 verifiedPlaces;\\n        uint256 registeredPlaces;\\n        bool isVerified;\\n        string name;\\n        string hometown;\\n        Faction faction;\\n    }\\n\\n    struct Location {\\n        address registeredBy;\\n        // decide on this\\n        // bytes32 Location;\\n        uint8 level;\\n        string placeName;\\n        string placeType;\\n        Faction faction;\\n    }\\n\\n    enum Faction {\\n        EcoGuardian,\\n        TechnoMad\\n    }\\n}\\n\",\"keccak256\":\"0xd31471238cba1935fd25fb8a39c54b859779a67f7f7bd98868deb808c9b8d257\",\"license\":\"MIT\"},\"contracts/storage/OdysseyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"../lib/Structs.sol\\\";\\n\\ncontract OdysseyStorage {\\n    address deployer;\\n\\n    mapping(uint256 => string) public tokenURIs;\\n\\n    mapping(address => Structs.Player) public players;\\n    mapping(address => bool) public isRegistered;\\n    mapping(uint256 locationId => Structs.Location) public locations;\\n}\\n\",\"keccak256\":\"0x638fe49f2c91694b35a9ac0f14df7414afa424b71ea4004323a7c11b13dce12b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600a6008553480156200001657600080fd5b5060408051808201909152600c81526b557262616e4f64797373657960a01b6020820152620000458162000102565b50600380546001600160a01b031916331790556040805160808101909152605080825262002bc560208301396000805260046020527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec90620000a89082620001b9565b5060405180608001604052806050815260200162002b7560509139600160005260046020527fabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe0590620000fb9082620001b9565b5062000285565b6002620001108282620001b9565b5050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200013f57607f821691505b6020821081036200016057634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001b457600081815260208120601f850160051c810160208610156200018f5750805b601f850160051c820191505b81811015620001b0578281556001016200019b565b5050505b505050565b81516001600160401b03811115620001d557620001d562000114565b620001ed81620001e684546200012a565b8462000166565b602080601f8311600181146200022557600084156200020c5750858301515b600019600386901b1c1916600185901b178555620001b0565b600085815260208120601f198616915b82811015620002565788860151825594840194600190910190840162000235565b5085821015620002755787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6128e080620002956000396000f3fe6080604052600436106101295760003560e01c8063a7bb5803116100ab578063e985e9c51161006f578063e985e9c5146103b7578063f242432a14610400578063f5de81c314610420578063f629950a14610440578063fa54080114610453578063fda249421461047357600080fd5b8063a7bb5803146102c5578063b9e0db3514610304578063c226611b14610335578063c3c5a54714610355578063e2eb41ff1461038557600080fd5b80634e1273f4116100f25780634e1273f4146102005780636c8b703f1461022d5780637fcacc0e1461024d57806397aba7f91461026d578063a22cb465146102a557600080fd5b8062fdd58e1461012e57806301ffc9a7146101615780630e89341c146101915780632151ff62146101be5780632eb2c2d6146101e0575b600080fd5b34801561013a57600080fd5b5061014e610149366004611ce3565b610493565b6040519081526020015b60405180910390f35b34801561016d57600080fd5b5061018161017c366004611d26565b61052c565b6040519015158152602001610158565b34801561019d57600080fd5b506101b16101ac366004611d4a565b61057c565b6040516101589190611da9565b3480156101ca57600080fd5b506101de6101d9366004611e71565b610610565b005b3480156101ec57600080fd5b506101de6101fb366004611faf565b61081a565b34801561020c57600080fd5b5061022061021b366004612058565b61085f565b604051610158919061215d565b34801561023957600080fd5b506101b1610248366004611d4a565b610988565b34801561025957600080fd5b50610181610268366004612170565b610a22565b34801561027957600080fd5b5061028d610288366004612170565b610aa7565b6040516001600160a01b039091168152602001610158565b3480156102b157600080fd5b506101de6102c03660046121ac565b610b26565b3480156102d157600080fd5b506102e56102e03660046121e8565b610b35565b6040805160ff9094168452602084019290925290820152606001610158565b34801561031057600080fd5b5061032461031f366004611d4a565b610ba7565b60405161015895949392919061225c565b34801561034157600080fd5b50610181610350366004611d4a565b610cf9565b34801561036157600080fd5b506101816103703660046122b5565b60066020526000908152604090205460ff1681565b34801561039157600080fd5b506103a56103a03660046122b5565b610f44565b604051610158969594939291906122d0565b3480156103c357600080fd5b506101816103d2366004612324565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b34801561040c57600080fd5b506101de61041b366004612357565b611092565b34801561042c57600080fd5b5061014e61043b3660046122b5565b6110d7565b6101de61044e3660046123bb565b6110e4565b34801561045f57600080fd5b5061014e61046e366004611d4a565b61138f565b34801561047f57600080fd5b5061014e61048e3660046122b5565b6113e2565b60006001600160a01b0383166105035760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b148061055d57506001600160e01b031982166303a24d0760e21b145b8061052657506301ffc9a760e01b6001600160e01b0319831614610526565b60606002805461058b90612442565b80601f01602080910402602001604051908101604052809291908181526020018280546105b790612442565b80156106045780601f106105d957610100808354040283529160200191610604565b820191906000526020600020905b8154815290600101906020018083116105e757829003601f168201915b50505050509050919050565b3360009081526006602052604090205460ff16156106705760405162461bcd60e51b815260206004820152601d60248201527f506c6179657220697320616c726561647920726567697374657265642e00000060448201526064016104fa565b61067a8383610a22565b6106bb5760405162461bcd60e51b8152602060048201526012602482015271496e76616c69642054786e20536f7572636560701b60448201526064016104fa565b6040518060c0016040528060008152602001600081526020016001151581526020018681526020018581526020018260018111156106fb576106fb612224565b905233600090815260056020908152604091829020835181559083015160018201559082015160028201805460ff19169115159190911790556060820151600382019061074890826124c7565b506080820151600482019061075d90826124c7565b5060a082015160058201805460ff19166001838181111561078057610780612224565b021790555050336000908152600660205260408120805460ff1916600117905590508160018111156107b4576107b4612224565b036107dc576107d73360006103e8604051806020016040528060008152506113ef565b610813565b60018160018111156107f0576107f0612224565b03610813576108133360016103e8604051806020016040528060008152506113ef565b5050505050565b6001600160a01b038516331480610836575061083685336103d2565b6108525760405162461bcd60e51b81526004016104fa90612586565b6108138585858585611503565b606081518351146108c45760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016104fa565b600083516001600160401b038111156108df576108df611dbc565b604051908082528060200260200182016040528015610908578160200160208202803683370190505b50905060005b84518110156109805761095385828151811061092c5761092c6125d4565b6020026020010151858381518110610946576109466125d4565b6020026020010151610493565b828281518110610965576109656125d4565b602090810291909101015261097981612600565b905061090e565b509392505050565b600460205260009081526040902080546109a190612442565b80601f01602080910402602001604051908101604052809291908181526020018280546109cd90612442565b8015610a1a5780601f106109ef57610100808354040283529160200191610a1a565b820191906000526020600020905b8154815290600101906020018083116109fd57829003601f168201915b505050505081565b600080610a2e8461138f565b90506000610a3c8285610aa7565b6003549091506001600160a01b03808316911614610a9c5760405162461bcd60e51b815260206004820152601a60248201527f556e617574686f72697a656420436f6e74726163742063616c6c00000000000060448201526064016104fa565b506001949350505050565b600080600080610ab685610b35565b6040805160008152602081018083528b905260ff8516918101919091526060810183905260808101829052929550909350915060019060a0016020604051602081039080840390855afa158015610b11573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b610b313383836116e0565b5050565b60008060008351604114610b8b5760405162461bcd60e51b815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e677468000000000000000060448201526064016104fa565b5050506020810151604082015160609092015160001a92909190565b600760205260009081526040902080546001820180546001600160a01b03831693600160a01b90930460ff16929190610bdf90612442565b80601f0160208091040260200160405190810160405280929190818152602001828054610c0b90612442565b8015610c585780601f10610c2d57610100808354040283529160200191610c58565b820191906000526020600020905b815481529060010190602001808311610c3b57829003601f168201915b505050505090806002018054610c6d90612442565b80601f0160208091040260200160405190810160405280929190818152602001828054610c9990612442565b8015610ce65780601f10610cbb57610100808354040283529160200191610ce6565b820191906000526020600020905b815481529060010190602001808311610cc957829003601f168201915b5050506003909301549192505060ff1685565b3360009081526006602052604081205460ff16610d585760405162461bcd60e51b815260206004820181905260248201527f4f6e6c7920706c61796572732063616e20726567697374657220706c6163657360448201526064016104fa565b336000908152600560208190526040909120015460ff166001811115610d8057610d80612224565b60008381526007602052604090206003015460ff166001811115610da657610da6612224565b14610de65760405162461bcd60e51b815260206004820152601060248201526f08cc2c6e8d2dedc409ad2e6dac2e8c6d60831b60448201526064016104fa565b6103e86000336000908152600560208190526040909120015460ff166001811115610e1357610e13612224565b03610e775780610e24336000610493565b1015610e665760405162461bcd60e51b81526020600482015260116024820152704e6f7420656e6f75676820456e6572677960781b60448201526064016104fa565b610e72336000836117c0565b610efc565b3360009081526005602081905260408220015460ff166001811115610e9e57610e9e612224565b03610efc5780610eaf336001610493565b1015610ef05760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f75676820436869707360801b60448201526064016104fa565b610efc336001836117c0565b60008381526007602052604090208054601490610f2290600160a01b900460ff16612619565b91906101000a81548160ff021916908360ff1602179055506001915050919050565b60056020526000908152604090208054600182015460028301546003840180549394929360ff9092169291610f7890612442565b80601f0160208091040260200160405190810160405280929190818152602001828054610fa490612442565b8015610ff15780601f10610fc657610100808354040283529160200191610ff1565b820191906000526020600020905b815481529060010190602001808311610fd457829003601f168201915b50505050509080600401805461100690612442565b80601f016020809104026020016040519081016040528092919081815260200182805461103290612442565b801561107f5780601f106110545761010080835404028352916020019161107f565b820191906000526020600020905b81548152906001019060200180831161106257829003601f168201915b5050506005909301549192505060ff1686565b6001600160a01b0385163314806110ae57506110ae85336103d2565b6110ca5760405162461bcd60e51b81526004016104fa90612586565b610813858585858561193c565b6000610526826001610493565b3360009081526006602052604090205460ff166111435760405162461bcd60e51b815260206004820181905260248201527f4f6e6c7920706c61796572732063616e20726567697374657220706c6163657360448201526064016104fa565b60c86000336000908152600560208190526040909120015460ff16600181111561116f5761116f612224565b036111d35780611180336000610493565b10156111c25760405162461bcd60e51b81526020600482015260116024820152704e6f7420656e6f75676820456e6572677960781b60448201526064016104fa565b6111ce336000836117c0565b611258565b3360009081526005602081905260408220015460ff1660018111156111fa576111fa612224565b03611258578061120b336001610493565b101561124c5760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f75676820436869707360801b60448201526064016104fa565b611258336001836117c0565b6040805160a0810182523380825260006020808401829052838501899052606084018890529181526005918290529290922090910154608082019060ff1660018111156112a7576112a7612224565b9052600854600090815260076020908152604091829020835181549285015160ff16600160a01b026001600160a81b03199093166001600160a01b039091161791909117815590820151600182019061130090826124c7565b506060820151600282019061131590826124c7565b50608082015160038201805460ff19166001838181111561133857611338612224565b021790555090505060086000815461134f90612600565b91905081905550611374336008546001604051806020016040528060008152506113ef565b600854600090815260046020526040902061081383826124c7565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b6000610526826000610493565b6001600160a01b03841661144f5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016104fa565b33600061145b85611a66565b9050600061146885611a66565b90506000868152602081815260408083206001600160a01b038b1684529091528120805487929061149a908490612638565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46114fa83600089898989611ab1565b50505050505050565b81518351146115655760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016104fa565b6001600160a01b03841661158b5760405162461bcd60e51b81526004016104fa9061264b565b3360005b84518110156116725760008582815181106115ac576115ac6125d4565b6020026020010151905060008583815181106115ca576115ca6125d4565b602090810291909101810151600084815280835260408082206001600160a01b038e16835290935291909120549091508181101561161a5760405162461bcd60e51b81526004016104fa90612690565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611657908490612638565b925050819055505050508061166b90612600565b905061158f565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516116c29291906126da565b60405180910390a46116d8818787878787611c0c565b505050505050565b816001600160a01b0316836001600160a01b0316036117535760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016104fa565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383166118225760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016104fa565b33600061182e84611a66565b9050600061183b84611a66565b60408051602080820183526000918290528882528181528282206001600160a01b038b16835290522054909150848110156118c45760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016104fa565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090526114fa565b6001600160a01b0384166119625760405162461bcd60e51b81526004016104fa9061264b565b33600061196e85611a66565b9050600061197b85611a66565b90506000868152602081815260408083206001600160a01b038c168452909152902054858110156119be5760405162461bcd60e51b81526004016104fa90612690565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906119fb908490612638565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611a5b848a8a8a8a8a611ab1565b505050505050505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611aa057611aa06125d4565b602090810291909101015292915050565b6001600160a01b0384163b156116d85760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611af59089908990889088908890600401612708565b6020604051808303816000875af1925050508015611b30575060408051601f3d908101601f19168201909252611b2d91810190612742565b60015b611bdc57611b3c61275f565b806308c379a003611b755750611b5061277b565b80611b5b5750611b77565b8060405162461bcd60e51b81526004016104fa9190611da9565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016104fa565b6001600160e01b0319811663f23a6e6160e01b146114fa5760405162461bcd60e51b81526004016104fa90612804565b6001600160a01b0384163b156116d85760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611c50908990899088908890889060040161284c565b6020604051808303816000875af1925050508015611c8b575060408051601f3d908101601f19168201909252611c8891810190612742565b60015b611c9757611b3c61275f565b6001600160e01b0319811663bc197c8160e01b146114fa5760405162461bcd60e51b81526004016104fa90612804565b80356001600160a01b0381168114611cde57600080fd5b919050565b60008060408385031215611cf657600080fd5b611cff83611cc7565b946020939093013593505050565b6001600160e01b031981168114611d2357600080fd5b50565b600060208284031215611d3857600080fd5b8135611d4381611d0d565b9392505050565b600060208284031215611d5c57600080fd5b5035919050565b6000815180845260005b81811015611d8957602081850181015186830182015201611d6d565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000611d436020830184611d63565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715611df757611df7611dbc565b6040525050565b600082601f830112611e0f57600080fd5b81356001600160401b03811115611e2857611e28611dbc565b604051611e3f601f8301601f191660200182611dd2565b818152846020838601011115611e5457600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215611e8957600080fd5b85356001600160401b0380821115611ea057600080fd5b611eac89838a01611dfe565b96506020880135915080821115611ec257600080fd5b611ece89838a01611dfe565b9550604088013594506060880135915080821115611eeb57600080fd5b50611ef888828901611dfe565b925050608086013560028110611f0d57600080fd5b809150509295509295909350565b60006001600160401b03821115611f3457611f34611dbc565b5060051b60200190565b600082601f830112611f4f57600080fd5b81356020611f5c82611f1b565b604051611f698282611dd2565b83815260059390931b8501820192828101915086841115611f8957600080fd5b8286015b84811015611fa45780358352918301918301611f8d565b509695505050505050565b600080600080600060a08688031215611fc757600080fd5b611fd086611cc7565b9450611fde60208701611cc7565b935060408601356001600160401b0380821115611ffa57600080fd5b61200689838a01611f3e565b9450606088013591508082111561201c57600080fd5b61202889838a01611f3e565b9350608088013591508082111561203e57600080fd5b5061204b88828901611dfe565b9150509295509295909350565b6000806040838503121561206b57600080fd5b82356001600160401b038082111561208257600080fd5b818501915085601f83011261209657600080fd5b813560206120a382611f1b565b6040516120b08282611dd2565b83815260059390931b85018201928281019150898411156120d057600080fd5b948201945b838610156120f5576120e686611cc7565b825294820194908201906120d5565b9650508601359250508082111561210b57600080fd5b5061211885828601611f3e565b9150509250929050565b600081518084526020808501945080840160005b8381101561215257815187529582019590820190600101612136565b509495945050505050565b602081526000611d436020830184612122565b6000806040838503121561218357600080fd5b8235915060208301356001600160401b038111156121a057600080fd5b61211885828601611dfe565b600080604083850312156121bf57600080fd5b6121c883611cc7565b9150602083013580151581146121dd57600080fd5b809150509250929050565b6000602082840312156121fa57600080fd5b81356001600160401b0381111561221057600080fd5b61221c84828501611dfe565b949350505050565b634e487b7160e01b600052602160045260246000fd5b6002811061225857634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b038616815260ff8516602082015260a06040820181905260009061228990830186611d63565b828103606084015261229b8186611d63565b9150506122ab608083018461223a565b9695505050505050565b6000602082840312156122c757600080fd5b611d4382611cc7565b868152856020820152841515604082015260c0606082015260006122f760c0830186611d63565b82810360808401526123098186611d63565b91505061231960a083018461223a565b979650505050505050565b6000806040838503121561233757600080fd5b61234083611cc7565b915061234e60208401611cc7565b90509250929050565b600080600080600060a0868803121561236f57600080fd5b61237886611cc7565b945061238660208701611cc7565b9350604086013592506060860135915060808601356001600160401b038111156123af57600080fd5b61204b88828901611dfe565b6000806000606084860312156123d057600080fd5b83356001600160401b03808211156123e757600080fd5b6123f387838801611dfe565b9450602086013591508082111561240957600080fd5b61241587838801611dfe565b9350604086013591508082111561242b57600080fd5b5061243886828701611dfe565b9150509250925092565b600181811c9082168061245657607f821691505b60208210810361247657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156124c257600081815260208120601f850160051c810160208610156124a35750805b601f850160051c820191505b818110156116d8578281556001016124af565b505050565b81516001600160401b038111156124e0576124e0611dbc565b6124f4816124ee8454612442565b8461247c565b602080601f83116001811461252957600084156125115750858301515b600019600386901b1c1916600185901b1785556116d8565b600085815260208120601f198616915b8281101561255857888601518255948401946001909101908401612539565b50858210156125765787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612612576126126125ea565b5060010190565b600060ff821660ff810361262f5761262f6125ea565b60010192915050565b80820180821115610526576105266125ea565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6040815260006126ed6040830185612122565b82810360208401526126ff8185612122565b95945050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061231990830184611d63565b60006020828403121561275457600080fd5b8151611d4381611d0d565b600060033d11156127785760046000803e5060005160e01c5b90565b600060443d10156127895790565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156127b857505050505090565b82850191508151818111156127d05750505050505090565b843d87010160208285010111156127ea5750505050505090565b6127f960208286010187611dd2565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b0386811682528516602082015260a06040820181905260009061287890830186612122565b828103606084015261288a8186612122565b9050828103608084015261289e8185611d63565b9897505050505050505056fea26469706673582212201d4792a846f86f5c772f8c6fcffdb9fdbd6a3bca34b668082dfafc17d15f9b3a64736f6c6343000814003368747470733a2f2f697066732e696f2f697066732f6261666b726569657463726d68626d62757467676c6b673467326d673264657035623464336e67646b627465346e33733533727a7278776968746968747470733a2f2f697066732e696f2f697066732f62616679626569687972353435347834346b366d74686c6962767a767768657a67716c357073323563346c37656764346466346667346a7a78776d",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."
      },
      "TransferBatch(address,address,address,uint256[],uint256[])": {
        "details": "Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."
      },
      "TransferSingle(address,address,address,uint256,uint256)": {
        "details": "Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."
      },
      "URI(string,uint256)": {
        "details": "Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 31,
        "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 33,
        "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2303,
        "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
        "label": "deployer",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2307,
        "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
        "label": "tokenURIs",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2312,
        "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
        "label": "players",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Player)2282_storage)"
      },
      {
        "astId": 2316,
        "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
        "label": "isRegistered",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2321,
        "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
        "label": "locations",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(Location)2294_storage)"
      },
      {
        "astId": 1806,
        "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
        "label": "locationCounter",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(Faction)2297": {
        "encoding": "inplace",
        "label": "enum Structs.Faction",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(Player)2282_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Structs.Player)",
        "numberOfBytes": "32",
        "value": "t_struct(Player)2282_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Location)2294_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Structs.Location)",
        "numberOfBytes": "32",
        "value": "t_struct(Location)2294_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Location)2294_storage": {
        "encoding": "inplace",
        "label": "struct Structs.Location",
        "members": [
          {
            "astId": 2284,
            "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
            "label": "registeredBy",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2286,
            "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
            "label": "level",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2288,
            "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
            "label": "placeName",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2290,
            "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
            "label": "placeType",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2293,
            "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
            "label": "faction",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(Faction)2297"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Player)2282_storage": {
        "encoding": "inplace",
        "label": "struct Structs.Player",
        "members": [
          {
            "astId": 2270,
            "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
            "label": "verifiedPlaces",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2272,
            "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
            "label": "registeredPlaces",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2274,
            "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
            "label": "isVerified",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 2276,
            "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
            "label": "name",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 2278,
            "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
            "label": "hometown",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 2281,
            "contract": "contracts/UrbanOdyssey.sol:UrbanOdyssey",
            "label": "faction",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(Faction)2297"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}